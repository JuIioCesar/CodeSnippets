<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>behavioral-interpreter-example</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>//üë®‚Äçüé§ Interpreter
//
//The interpreter pattern is used to evaluate sentences in a language.
//
//Example

protocol IntegerExpression {
    func evaluate(_ context: IntegerContext) -&gt; Int
    func replace(character: Character, integerExpression: IntegerExpression) -&gt; IntegerExpression
    func copied() -&gt; IntegerExpression
}

final class IntegerContext {
    private var data: [Character:Int] = [:]
    
    func lookup(name: Character) -&gt; Int {
        return self.data[name]!
    }
    
    func assign(expression: IntegerVariableExpression, value: Int) {
        self.data[expression.name] = value
    }
}

final class IntegerVariableExpression: IntegerExpression {
    let name: Character
    
    init(name: Character) {
        self.name = name
    }
    
    func evaluate(_ context: IntegerContext) -&gt; Int {
        return context.lookup(name: self.name)
    }
    
    func replace(character name: Character, integerExpression: IntegerExpression) -&gt; IntegerExpression {
        if name == self.name {
            return integerExpression.copied()
        } else {
            return IntegerVariableExpression(name: self.name)
        }
    }
    
    func copied() -&gt; IntegerExpression {
        return IntegerVariableExpression(name: self.name)
    }
}

final class AddExpression: IntegerExpression {
    private var operand1: IntegerExpression
    private var operand2: IntegerExpression
    
    init(op1: IntegerExpression, op2: IntegerExpression) {
        self.operand1 = op1
        self.operand2 = op2
    }
    
    func evaluate(_ context: IntegerContext) -&gt; Int {
        return self.operand1.evaluate(context) + self.operand2.evaluate(context)
    }
    
    func replace(character: Character, integerExpression: IntegerExpression) -&gt; IntegerExpression {
        return AddExpression(op1: operand1.replace(character: character, integerExpression: integerExpression),
                             op2: operand2.replace(character: character, integerExpression: integerExpression))
    }
    
    func copied() -&gt; IntegerExpression {
        return AddExpression(op1: self.operand1, op2: self.operand2)
    }
}

//Usage

var context = IntegerContext()

var a = IntegerVariableExpression(name: "A")
var b = IntegerVariableExpression(name: "B")
var c = IntegerVariableExpression(name: "C")

var expression = AddExpression(op1: a, op2: AddExpression(op1: b, op2: c)) // a + (b + c)

context.assign(expression: a, value: 2)
context.assign(expression: b, value: 1)
context.assign(expression: c, value: 3)

var result = expression.evaluate(context)
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>D99C027D-3C85-4D90-BFD7-2C2F60A854BC</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Generic</string>
	<key>IDECodeSnippetSummary</key>
	<string>The interpreter pattern is used to evaluate sentences in a language.</string>
	<key>IDECodeSnippetTitle</key>
	<string>Interpreter</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
